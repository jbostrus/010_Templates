//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: PEX.bt
//   Authors: Jonathan Ostrus
//   Version: 0.05
//   Purpose: 
//  Category: 
// File Mask: *.pex
//  ID Bytes: DE C0 57 FA, FA 57 C0 DE
//   History: 
//------------------------------------------------

// Format references
// https://en.uesp.net/wiki/Skyrim_Mod:Compiled_Script_File_Format
// https://github.com/Orvid/Champollion

typedef enum <uint16> {
    GAME_Skyrim     = 1,
    GAME_Fallout4   = 2,
    GAME_Fallout76  = 3,
    GAME_Starfield  = 4
} GAMEID;

local GAMEID g_GameId;

typedef struct _ShortString
{
    ushort length;
    if (length > 0)    
        uchar text[length];
} ShortString <open=suppress, read=ShortStringRead>;

string ShortStringRead( ShortString& f )
{
    if (f.length == 0) return "";
    string s;
    SPrintf( s, "%s", f.text );
    return s;
}

typedef struct VariableData {
    ubyte type;
    switch (type)
    {
    case 0x0:   // null
        break;
    case 0x1:   // identifier
    case 0x2:   // string
        uint16 stringVal  <read=StringLookup>;
        break;
    case 0x3:   // integer
        int32 intVal;
        break;
    case 0x4:   // float
        float floatVal;
        break;
    case 0x5:   // bool
        ubyte boolVal;
        break;
    default:
        Assert(false, "Unknown type for variable data");
        break;
    }
};

typedef struct VariableType {
    uint16 name <read=StringLookup>;
    uint16 type <read=StringLookup>;
};

typedef struct Instruction {
    ubyte op;
    switch (op)
    {
    case 0: // nop
        break;
    case 1: // iadd
    case 2: // fadd
    case 3: // isub
    case 4: // fsub
    case 5: // imul
    case 6: // fmul
    case 7: // idiv
    case 8: // fdiv
    case 9: // imod
    case 0x0F: // cmp_eq
    case 0x10: // cmp_lt
    case 0x11: // cmp_lte
    case 0x12: // cmp_gt
    case 0x13: // comp_gte
    case 0x1B: // strcat
    case 0x1C: // propget
    case 0x1D: // propset
    case 0x20: // array_getlement
    case 0x21: // array_setelement
    case 0x24: // is
    case 0x26: // struct_get
    case 0x27: // struct_set
    case 0x2A: // array_add
    case 0x2B: // array_insert
    case 0x2D: // array_remove
        VariableData argument[3] <optimize=false>;
        break;
    case 0x22: // array_findelement
    case 0x23: // array_rfindelement
        VariableData argument[4] <optimize=false>;
        break;
    case 0x14: // jmp
    case 0x1A: // return
    case 0x25: // struct_create
    case 0x2C: // array_removelast
    case 0x2E: // array_clear
        VariableData argument[1] <optimize=false>;
        break;
    case 0x0A: // not
    case 0x0B: // ineg
    case 0x0C: // fneg
    case 0x0D: // assign
    case 0x0E: // cast
    case 0x15: // jmpt
    case 0x16: // jmpf
    case 0x1E: // array_create
    case 0x1F: // array_length
        VariableData argument[2] <optimize=false>;
        break;
    case 0x28: // array_findstruct
    case 0x29: // array_rfindstruct
        VariableData argument[5] <optimize=false>;
        break;
    case 0x2F: // array_getallmatchingstructs
        VariableData argument[6] <optimize=false>;
        break;
    case 0x17: // callmethod
    case 0x19: // callstatic
        VariableData argument[4] <optimize=false>;
        Assert(argument[3].type == 0x3, "VarArgs not integer");
        if (argument[3].intVal > 0)
            VariableData varArgument[argument[3].intVal] <optimize=false>;
        break;
    case 0x18: // callparent
        VariableData argument[3] <optimize=false>;
        Assert(argument[2].type == 0x3, "VarArgs not integer");
        if (argument[2].intVal > 0)
            VariableData varArgument[argument[2].intVal] <optimize=false>;
        break;
    case 0x30: // lock_guards
    case 0x31: // unlock_guards
        VariableData argument[1] <optimize=false>;
        Assert(argument[0].type == 0x3, "VarArgs not integer");
        if (argument[0].intVal > 0)
            VariableData varArgument[argument[0].intVal] <optimize=false>;
        break;
    case 0x32: // try_lock_guards
        VariableData argument[2] <optimize=false>;
        Assert(argument[1].type == 0x3, "VarArgs not integer");
        if (argument[1].intVal > 0)
            VariableData varArgument[argument[1].intVal] <optimize=false>;
        break;
    default:
        Printf("Invalid opcode: %Xh\n", op);
        Assert(false, "Invalid opcode");
        break;
    }

};

typedef struct Function {
    uint16 returnType <read=StringLookup>;
    uint16 docString <read=StringLookup>;
    uint32 userFlags;
    ubyte flags;
    uint16 numParameters;
    if (numParameters > 0)
        VariableType parameter[numParameters] <optimize=false>;
    uint16 numLocals;
    if (numLocals > 0)
            VariableType locals[numLocals] <optimize=false>;
    uint16 numInstructions;
    if (numInstructions > 0)
        Instruction instruction[numInstructions] <optimize=false>;
};

typedef struct NamedFunction {
    uint16 functionName <read=StringLookup>;
    Function function;
};

typedef struct State {
    uint16 name <read=StringLookup>;
    uint16 numFunctions;
    if (numFunctions > 0)
        NamedFunction function[numFunctions] <optimize=false>;    
};

typedef struct States {
    uint16 numStates;
    if (numStates > 0)
        State state[numStates] <optimize=false>;
};

typedef struct Property {
    uint16 name <read=StringLookup>;
    uint16 type <read=StringLookup>;
    uint16 docString <read=StringLookup>;
    uint32 userFlags;
    ubyte flags;
    if ((flags & 0x4) != 0)
        uint16 autoVarName <read=StringLookup>;
    else {
        if ((flags & 0x1) != 0)
            Function readHandler;
        if ((flags & 0x2) != 0)
            Function writeHandler;
    }
};

typedef struct Properties {
    uint16 numProperties;
    if (numProperties > 0)
        Property property[numProperties] <optimize=false>;
};

typedef struct Variable {
    uint16 name <read=StringLookup>;
    uint16 typeName <read=StringLookup>;
    uint32 userFlags;
    VariableData data;
    if (g_GameId >= GAME_Fallout4)
        ubyte  constFlag;
};

typedef struct Variables {
    uint16 numVariables;
    if (numVariables > 0)
        Variable variable[numVariables] <optimize=false>;
};

typedef struct ScriptStructMembers {
    uint16 name <read=StringLookup>;
    uint16 typeName <read=StringLookup>;
    uint32 userFlags;
    VariableData data;
    ubyte  constFlag;
    uint16 docString <read=StringLookup>;
};

typedef struct ScriptStruct {
    uint16 name <read=StringLookup>;
    uint16 memberCount;
    if (memberCount > 0)
        ScriptStructMembers member[memberCount] <optimize=false>;
};

typedef struct ScriptStructs {
    uint16 structCount;
    if (structCount > 0)
        ScriptStruct structs[structCount] <optimize=false>;
};

typedef struct Guards {
    uint16 numGuards;
    if (numGuards > 0)
        uint16 name[numGuards] <optimize=false,read=StringLookup>;
};

typedef struct ObjectData {
    uint16 parentClassName <read=StringLookup>;
    uint16 docstring <read=StringLookup>;
    if (g_GameId >= GAME_Fallout4)
        ubyte  constFlag;
    uint32 userFlags;
    uint16 autoStateName <read=StringLookup>;
    if (g_GameId >= GAME_Fallout4)
        ScriptStructs structs;
    Variables variables;
    if (g_GameId >= GAME_Starfield)
        Guards guards;
    Properties properties;
    States states;
};

typedef struct Object {
    uint16 nameIndex <read=StringLookup>;
    uint32 size;
    ObjectData data;

    Assert(sizeof(data) == size - 4 || sizeof(data) == size );
};

typedef struct Objects {
    uint16 objectCount;
    if (objectCount > 0)
        Object objects[objectCount] <optimize=false>;
};

typedef struct UserFlag {
    uint16 nameIndex <read=StringLookup>;
    ubyte  flagIndex;
};

typedef struct UserFlags {
    uint16 userFlagCount;
    if (userFlagCount > 0)
        UserFlag userFlags[userFlagCount] <optimize=false>;
};

typedef struct DebugPropertyGroups {
    uint16 objectName <read=StringLookup>;
    uint16 groupName <read=StringLookup>;
    uint16 docString <read=StringLookup>;
    uint32 userFlags;
    uint16 nameCount;
    if (nameCount > 0)
        uint16 names[nameCount] <read=StringLookup>;
};

typedef struct DebugFunctions {
    uint16 objectNameIndex <read=StringLookup>;
    uint16 stateNameIndex <read=StringLookup>;
    uint16 functionNameIndex <read=StringLookup>;
    ubyte  functionType;
    uint16 instructionCount;
    if (instructionCount > 0)
        uint16 lineNumbers[instructionCount] <optimize=false>;
};

typedef struct DebugStructOrder {
    uint16 name <read=StringLookup>;
    uint16 orderName <read=StringLookup>;
    uint16 varCount;
    if (varCount > 0)
        uint16 varNames[varCount] <optimize=false,read=StringLookup>;
};

typedef struct DebugInfo {
    ubyte  hasDebugInfo;
    if (hasDebugInfo)
    {
        uint64 modificationTime;
        uint16 functionCount;
        if (functionCount > 0)
            DebugFunctions debugFunctions[functionCount] <optimize=false>;
        if (g_GameId >= GAME_Fallout4)
        {
            uint16 groupCount;
            if (groupCount > 0)
                DebugPropertyGroups debugPropertyGroups[groupCount] <optimize=false>;
            uint16 structCount;
            if (structCount > 0)
                DebugStructOrder structOrder[structCount] <optimize=false>;
        }
    }
};

typedef struct StringTable {
    uint16 count;
    if (count > 0)
        ShortString strings[count] <optimize=false>;
};

LittleEndian();
struct PEX {
    struct HEADER {
        uint32 MAGIC <format=hex>;
        if (MAGIC == 0xDEC057FA) // switch to big endian for Skyrim
            BigEndian();

        ubyte  majorVersion;
        ubyte  minorVersion;
        GAMEID gameId; g_GameId = gameId;
        uint64 compilationTime;
        ShortString sourceFileName;
        ShortString username;
        ShortString machinename;
    } header <open=true>;
    StringTable stringTable;
    DebugInfo debugInfo;
    UserFlags userFlags;
    Objects objects;
} pex <open=true>;


string StringLookup( uint16& idx ) {
    return ShortStringRead( pex.stringTable.strings[idx] );
}
